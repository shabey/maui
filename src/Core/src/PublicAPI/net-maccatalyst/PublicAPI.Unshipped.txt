#nullable enable
Microsoft.Maui.ElementHandlerExtensions
Microsoft.Maui.HandlerDisconnectPolicy
Microsoft.Maui.HandlerDisconnectPolicy.Automatic = 0 -> Microsoft.Maui.HandlerDisconnectPolicy
Microsoft.Maui.HandlerDisconnectPolicy.Manual = 1 -> Microsoft.Maui.HandlerDisconnectPolicy
Microsoft.Maui.Handlers.HybridWebViewHandler
Microsoft.Maui.Handlers.HybridWebViewHandler.HybridWebViewHandler() -> void
Microsoft.Maui.Handlers.HybridWebViewHandler.HybridWebViewHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.IHybridPlatformWebView
Microsoft.Maui.Handlers.IHybridPlatformWebView.SendRawMessage(string! rawMessage) -> void
Microsoft.Maui.Handlers.IHybridWebViewHandler
Microsoft.Maui.Handlers.IHybridWebViewHandler.PlatformView.get -> WebKit.WKWebView!
Microsoft.Maui.Handlers.IHybridWebViewHandler.VirtualView.get -> Microsoft.Maui.IHybridWebView!
Microsoft.Maui.HybridWebViewRawMessage
Microsoft.Maui.HybridWebViewRawMessage.HybridWebViewRawMessage() -> void
Microsoft.Maui.HybridWebViewRawMessage.Message.get -> string?
Microsoft.Maui.HybridWebViewRawMessage.Message.set -> void
Microsoft.Maui.IApplication.ActivateWindow(Microsoft.Maui.IWindow! window) -> void
Microsoft.Maui.IHybridWebView
Microsoft.Maui.IHybridWebView.DefaultFile.get -> string?
Microsoft.Maui.IHybridWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string?>!
Microsoft.Maui.IHybridWebView.HybridRoot.get -> string?
Microsoft.Maui.IHybridWebView.MessageReceived(string! rawMessage) -> void
Microsoft.Maui.IHybridWebView.SendRawMessage(string! rawMessage) -> void
Microsoft.Maui.ITitleBar
Microsoft.Maui.ITitleBar.PassthroughElements.get -> System.Collections.Generic.IList<Microsoft.Maui.IView!>!
Microsoft.Maui.ITitleBar.Subtitle.get -> string?
Microsoft.Maui.ITitleBar.Title.get -> string?
Microsoft.Maui.IWebView.ProcessTerminated(Microsoft.Maui.WebProcessTerminatedEventArgs! args) -> void
*REMOVED*Microsoft.Maui.IWindow.Content.get -> Microsoft.Maui.IView!
Microsoft.Maui.IWindow.Content.get -> Microsoft.Maui.IView?
Microsoft.Maui.LifecycleEvents.iOSLifecycle.ReceivedRemoteNotification
Microsoft.Maui.LifecycleEvents.iOSLifecycle.RegisteredForRemoteNotifications
Microsoft.Maui.Platform.MauiHybridWebView
Microsoft.Maui.Platform.MauiHybridWebView.MauiHybridWebView(Microsoft.Maui.Handlers.HybridWebViewHandler! handler, CoreGraphics.CGRect frame, WebKit.WKWebViewConfiguration! configuration) -> void
Microsoft.Maui.Platform.MauiHybridWebView.SendRawMessage(string! rawMessage) -> void
Microsoft.Maui.Platform.MauiWKWebView.ContentProcessDidTerminate(WebKit.WKWebView! webView) -> void
Microsoft.Maui.Platform.UIWindowExtensions
Microsoft.Maui.TextAlignment.Justify = 3 -> Microsoft.Maui.TextAlignment
Microsoft.Maui.WebProcessTerminatedEventArgs
Microsoft.Maui.WebProcessTerminatedEventArgs.Sender.get -> WebKit.WKWebView!
override Microsoft.Maui.Handlers.HybridWebViewHandler.ConnectHandler(WebKit.WKWebView! platformView) -> void
override Microsoft.Maui.Handlers.HybridWebViewHandler.CreatePlatformView() -> WebKit.WKWebView!
override Microsoft.Maui.Handlers.HybridWebViewHandler.DisconnectHandler(WebKit.WKWebView! platformView) -> void
static Microsoft.Maui.ElementHandlerExtensions.GetRequiredService<T>(this Microsoft.Maui.IElementHandler! handler, System.Type! type) -> T
static Microsoft.Maui.ElementHandlerExtensions.GetRequiredService<T>(this Microsoft.Maui.IElementHandler! handler) -> T
static Microsoft.Maui.ElementHandlerExtensions.GetService<T>(this Microsoft.Maui.IElementHandler! handler, System.Type! type) -> T?
static Microsoft.Maui.ElementHandlerExtensions.GetService<T>(this Microsoft.Maui.IElementHandler! handler) -> T?
static Microsoft.Maui.ElementHandlerExtensions.GetServiceProvider(this Microsoft.Maui.IElementHandler! handler) -> System.IServiceProvider!
static Microsoft.Maui.ElementHandlerExtensions.IsConnected(this Microsoft.Maui.IElementHandler! handler) -> bool
static Microsoft.Maui.Handlers.ApplicationHandler.MapActivateWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void
static Microsoft.Maui.Handlers.HybridWebViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IHybridWebView!, Microsoft.Maui.Handlers.IHybridWebViewHandler!>!
static Microsoft.Maui.Handlers.HybridWebViewHandler.MapEvaluateJavaScriptAsync(Microsoft.Maui.Handlers.IHybridWebViewHandler! handler, Microsoft.Maui.IHybridWebView! hybridWebView, object? arg) -> void
static Microsoft.Maui.Handlers.HybridWebViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IHybridWebView!, Microsoft.Maui.Handlers.IHybridWebViewHandler!>!
static Microsoft.Maui.Handlers.HybridWebViewHandler.MapSendRawMessage(Microsoft.Maui.Handlers.IHybridWebViewHandler! handler, Microsoft.Maui.IHybridWebView! hybridWebView, object? arg) -> void
static Microsoft.Maui.Keyboard.Date.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Password.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Time.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.ReceivedRemoteNotification(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.ReceivedRemoteNotification! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.RegisteredForRemoteNotifications(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.RegisteredForRemoteNotifications! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
*REMOVED*static Microsoft.Maui.Platform.ElementExtensions.ToUIViewController(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> UIKit.UIViewController!
static Microsoft.Maui.Platform.ElementExtensions.ToUIViewController(this Microsoft.Maui.IElement? view, Microsoft.Maui.IMauiContext! context) -> UIKit.UIViewController!
static Microsoft.Maui.Platform.UIWindowExtensions.GetWindow(this UIKit.UIWindow? platformWindow) -> Microsoft.Maui.IWindow?
static Microsoft.Maui.Platform.UIWindowExtensions.GetWindow(this UIKit.UIWindowScene? windowScene) -> Microsoft.Maui.IWindow?
static Microsoft.Maui.ViewExtensions.DisconnectHandlers(this Microsoft.Maui.IView! view) -> void
virtual Microsoft.Maui.MauiUIApplicationDelegate.ReceivedRemoteNotification(UIKit.UIApplication! application, Foundation.NSDictionary! userInfo) -> void
virtual Microsoft.Maui.MauiUIApplicationDelegate.RegisteredForRemoteNotifications(UIKit.UIApplication! application, Foundation.NSData! deviceToken) -> void
override Microsoft.Maui.Platform.MauiCALayer.AddAnimation(CoreAnimation.CAAnimation! animation, string? key) -> void
*REMOVED*override Microsoft.Maui.Handlers.BorderHandler.ConnectHandler(Microsoft.Maui.Platform.ContentView! platformView) -> void
Microsoft.Maui.Handlers.ToolbarHandler.NavigationController.get -> UIKit.UINavigationController!
Microsoft.Maui.Handlers.NavigationViewHandler.NavigationManager.get -> Microsoft.Maui.Platform.NavigationManager?
Microsoft.Maui.Handlers.NavigationViewHandler.StackNavigationManager.get -> Microsoft.Maui.Platform.StackNavigationManager?
Microsoft.Maui.Platform.MauiNavigationBar
Microsoft.Maui.Platform.MauiNavigationBar.MauiNavigationBar(Microsoft.Maui.Platform.PlatformNavigationController! navigationController) -> void
Microsoft.Maui.Platform.MauiNavigationBar.NavigationController.get -> System.WeakReference<Microsoft.Maui.Platform.PlatformNavigationController!>!
Microsoft.Maui.Platform.NavigationManager
Microsoft.Maui.Platform.NavigationManager.NavigationController.get -> UIKit.UINavigationController?
Microsoft.Maui.Platform.NavigationManager.NavigationManager(Microsoft.Maui.IMauiContext! mauiContext) -> void
Microsoft.Maui.Platform.NavigationManager.SetNavigationController(UIKit.UINavigationController! navigationController) -> void
Microsoft.Maui.Platform.NavigationManager.SetToolbarElement(Microsoft.Maui.IToolbarElement! toolbarElement) -> void
Microsoft.Maui.Platform.NavigationManager.ToolbarElement.get -> Microsoft.Maui.IToolbarElement?
Microsoft.Maui.Platform.ParentViewController
Microsoft.Maui.Platform.ParentViewController.ParentViewController(Microsoft.Maui.Handlers.NavigationViewHandler! handler, Microsoft.Maui.Platform.PlatformNavigationController! navController, Microsoft.Maui.IView! page, Microsoft.Maui.IMauiContext! mauiContext) -> void
Microsoft.Maui.Platform.ParentViewController.UpdateSafeArea() -> void
Microsoft.Maui.Platform.PlatformNavigationController
Microsoft.Maui.Platform.PlatformNavigationController.IsDisposed.get -> bool
Microsoft.Maui.Platform.PlatformNavigationController.NavigationHandler.get -> System.WeakReference<Microsoft.Maui.Handlers.NavigationViewHandler!>!
Microsoft.Maui.Platform.PlatformNavigationController.PlatformNavigationController(Microsoft.Maui.Handlers.NavigationViewHandler! handler, System.Type? navigationBarType = null, System.Type? toolbarType = null) -> void
Microsoft.Maui.Platform.PlatformNavigationController.SecondaryToolbar.get -> System.WeakReference<UIKit.UIToolbar!>!
Microsoft.Maui.Platform.PlatformNavigationController.SecondaryToolbar.set -> void
Microsoft.Maui.Platform.PlatformNavigationController.UpdateHideNavigationBarSeparator(bool shouldHideNavigationBarSeparator) -> void
Microsoft.Maui.Platform.PlatformNavigationController.UpdateHomeIndicatorAutoHidden() -> void
Microsoft.Maui.Platform.PlatformNavigationController.UpdateSecondaryToolBarVisible() -> void
Microsoft.Maui.Platform.PlatformNavigationController.UpdateStatusBarHidden() -> void
Microsoft.Maui.Platform.PlatformNavigationController.ValidateNavBarExists(bool newNavigationPageHasNavBar) -> void
Microsoft.Maui.Platform.StackNavigationManager
Microsoft.Maui.Platform.StackNavigationManager.StackNavigationManager(Microsoft.Maui.IMauiContext! mauiContext) -> void
Microsoft.Maui.Platform.UINavigationBarExtensions
Microsoft.Maui.Platform.UINavigationControllerExtensions
Microsoft.Maui.Platform.UIViewControllerExtensions
override Microsoft.Maui.Handlers.NavigationViewHandler.ConnectHandler(UIKit.UIView! platformView) -> void
override Microsoft.Maui.Handlers.NavigationViewHandler.DisconnectHandler(UIKit.UIView! platformView) -> void
override Microsoft.Maui.Platform.ParentViewController.Dispose(bool disposing) -> void
override Microsoft.Maui.Platform.ParentViewController.ViewDidDisappear(bool animated) -> void
override Microsoft.Maui.Platform.ParentViewController.ViewDidLayoutSubviews() -> void
override Microsoft.Maui.Platform.ParentViewController.ViewWillAppear(bool animated) -> void
override Microsoft.Maui.Platform.PlatformNavigationController.Dispose(bool disposing) -> void
override Microsoft.Maui.Platform.PlatformNavigationController.ViewDidLoad() -> void
override Microsoft.Maui.Platform.PlatformNavigationController.ViewWillLayoutSubviews() -> void
static Microsoft.Maui.Handlers.ToolbarHandler.MapBackButtonVisible(Microsoft.Maui.Handlers.IToolbarHandler! handler, Microsoft.Maui.IToolbar! toolbar) -> void
static Microsoft.Maui.Handlers.ToolbarHandler.MapIsVisible(Microsoft.Maui.Handlers.IToolbarHandler! handler, Microsoft.Maui.IToolbar! toolbar) -> void
static Microsoft.Maui.Platform.UINavigationBarExtensions.GetEmptyBackIndicatorImage() -> UIKit.UIImage!
static Microsoft.Maui.Platform.UINavigationBarExtensions.SetupDefaultNavigationBarAppearance(this UIKit.UINavigationBar! navBar) -> void
static Microsoft.Maui.Platform.UINavigationControllerExtensions.UpdateBackButtonVisibility(this UIKit.UINavigationController! navigationController, bool backButtonVisible) -> void
static Microsoft.Maui.Platform.UINavigationControllerExtensions.UpdateNavigationBarVisibility(this UIKit.UINavigationController! navigationController, bool isNavigationbarVisible, bool animated) -> void
static Microsoft.Maui.Platform.UIViewControllerExtensions.InvalidateMeasure(this UIKit.UIViewController! viewController) -> void
static Microsoft.Maui.Platform.UIViewControllerExtensions.UpdateBackButtonTitle(this UIKit.UIViewController! viewController, string! backButtonTitle) -> void
static Microsoft.Maui.Platform.UIViewControllerExtensions.UpdateNavigationBarTitle(this UIKit.UIViewController! viewController, string! title) -> void
virtual Microsoft.Maui.Handlers.NavigationViewHandler.CreateStackNavigationManager() -> Microsoft.Maui.Platform.StackNavigationManager!
virtual Microsoft.Maui.Platform.PlatformNavigationController.BackButtonClicked() -> void
virtual Microsoft.Maui.Platform.PlatformNavigationController.ShouldPopItem(UIKit.UINavigationBar! _, UIKit.UINavigationItem! __) -> bool
virtual Microsoft.Maui.Platform.StackNavigationManager.Connect(Microsoft.Maui.IStackNavigationView! virtualView, Microsoft.Maui.Platform.PlatformNavigationController! navigationController, Microsoft.Maui.Handlers.NavigationViewHandler! navigationViewHandler) -> void
virtual Microsoft.Maui.Platform.StackNavigationManager.Disconnect(Microsoft.Maui.IStackNavigationView! virtualView, UIKit.UINavigationController! navigationController) -> void
virtual Microsoft.Maui.Platform.StackNavigationManager.RequestNavigation(Microsoft.Maui.NavigationRequest! request) -> void
